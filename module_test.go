package wax_test

import (
	"bytes"
	"testing"

	"github.com/bearmini/wax"
	"github.com/kylelemons/godebug/pretty"
)

func TestParseModule(t *testing.T) {
	testData := []struct {
		Name     string
		Wasm     []byte
		Expected *wax.Module
	}{
		{
			Name: "pattern 1 - rustc examples/add/main.rs && wastrip ",
			Wasm: []byte{
				// magic & version
				0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,

				// Type section
				0x01, 0x0a,
				0x02, 0x60, 0x00, 0x00, 0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f,

				// Function section
				0x03, 0x03,
				0x02, 0x00, 0x01,

				// Table section
				0x04, 0x05,
				0x01, 0x70, 0x01, 0x01, 0x01,

				// Memory section
				0x05, 0x03,
				0x01, 0x00, 0x10,

				// Global section
				0x06, 0x19,
				0x03, 0x7f, 0x01, 0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b, 0x7f, 0x00, 0x41, 0x80, 0x80, 0xc0, 0x00,
				0x0b, 0x7f, 0x00, 0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b,

				// Export section
				0x07, 0x47,
				0x05, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x19, 0x5f, 0x5f, 0x69, 0x6e, 0x64,
				0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
				0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x0b, 0x5f, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x61,
				0x73, 0x65, 0x03, 0x01, 0x0a, 0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x03,
				0x02, 0x03, 0x61, 0x64, 0x64, 0x00, 0x01,

				// Code section
				0x0a, 0x0c,
				0x02, 0x02, 0x00, 0x0b, 0x07, 0x00, 0x20, 0x01, 0x20, 0x00, 0x6a, 0x0b,

				// Custom section
				0x00, 0x20,
				0x04, 0x6e, 0x61, 0x6d, 0x65, 0x01, 0x19, 0x02, 0x00, 0x11, 0x5f, 0x5f, 0x77, 0x61, 0x73, 0x6d,
				0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x01, 0x03, 0x61, 0x64, 0x64,

				// Custom section
				0x00, 0x51,
				0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x02, 0x08, 0x6c, 0x61, 0x6e, 0x67,
				0x75, 0x61, 0x67, 0x65, 0x01, 0x04, 0x52, 0x75, 0x73, 0x74, 0x04, 0x32, 0x30, 0x31, 0x35, 0x0c,
				0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2d, 0x62, 0x79, 0x01, 0x05, 0x72, 0x75,
				0x73, 0x74, 0x63, 0x1d, 0x31, 0x2e, 0x33, 0x32, 0x2e, 0x30, 0x20, 0x28, 0x39, 0x66, 0x64, 0x61,
				0x37, 0x63, 0x32, 0x32, 0x33, 0x20, 0x32, 0x30, 0x31, 0x39, 0x2d, 0x30, 0x31, 0x2d, 0x31, 0x36,
				0x29,
			},
			Expected: &wax.Module{
				Preamble: wax.Preamble{
					MagicNumber: 0x6d736100,
					Version:     0x00000001,
				},
				Sections: []wax.Section{
					&wax.TypeSection{
						SectionBase: wax.SectionBase{
							ID:      wax.TypeSectionID,
							Size:    0x0a,
							Content: []byte{0x02, 0x60, 0x00, 0x00, 0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f},
						},
						FuncTypes: []*wax.FuncType{
							&wax.FuncType{
								ParamTypes:  []wax.ValType{},
								ReturnTypes: []wax.ValType{},
							},
							&wax.FuncType{
								ParamTypes:  []wax.ValType{0x7f, 0x7f},
								ReturnTypes: []wax.ValType{0x7f},
							},
						},
					},
					&wax.FunctionSection{
						SectionBase: wax.SectionBase{
							ID:      wax.FunctionSectionID,
							Size:    0x03,
							Content: []byte{0x02, 0x00, 0x01},
						},
						Types: []wax.TypeIdx{wax.TypeIdx(0x00), wax.TypeIdx(0x01)},
					},
					&wax.TableSection{
						SectionBase: wax.SectionBase{
							ID:      wax.TableSectionID,
							Size:    0x05,
							Content: []byte{0x01, 0x70, 0x01, 0x01, 0x01},
						},
						TableTypes: []*wax.TableType{
							{
								ElementType: wax.ElemType(0x70),
								Limits: wax.Limits{
									Min: 1,
									Max: &[]uint32{1}[0],
								},
							},
						},
					},
					&wax.MemorySection{
						SectionBase: wax.SectionBase{
							ID:      wax.MemorySectionID,
							Size:    0x03,
							Content: []byte{0x01, 0x00, 0x10},
						},
						MemTypes: []*wax.MemType{
							{
								Limits: wax.Limits{
									Min: 0x10,
								},
							},
						},
					},
					&wax.GlobalSection{
						SectionBase: wax.SectionBase{
							ID:   wax.GlobalSectionID,
							Size: 0x19,
							Content: []byte{
								0x03, 0x7f, 0x01, 0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b, 0x7f, 0x00, 0x41, 0x80, 0x80, 0xc0, 0x00,
								0x0b, 0x7f, 0x00, 0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b,
							},
						},
						Globals: []*wax.Global{
							&wax.Global{
								Type: wax.GlobalType{
									R: wax.ValTypeI32,
									M: 0x01,
								},
								Init: wax.InitExpr{0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b},
							},
							&wax.Global{
								Type: wax.GlobalType{
									R: wax.ValTypeI32,
									M: 0x00,
								},
								Init: wax.InitExpr{0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b},
							},
							&wax.Global{
								Type: wax.GlobalType{
									R: wax.ValTypeI32,
									M: 0x00,
								},
								Init: wax.InitExpr{0x41, 0x80, 0x80, 0xc0, 0x00, 0x0b},
							},
						},
					},
					&wax.ExportSection{
						SectionBase: wax.SectionBase{
							ID:   wax.ExportSectionID,
							Size: 0x47,
							Content: []byte{
								0x05, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x19, 0x5f, 0x5f, 0x69, 0x6e, 0x64,
								0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
								0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x0b, 0x5f, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x61,
								0x73, 0x65, 0x03, 0x01, 0x0a, 0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x03,
								0x02, 0x03, 0x61, 0x64, 0x64, 0x00, 0x01,
							},
						},
						Exports: []*wax.Export{
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79})),
								DescType: wax.ExportDescTypeMem,
								Desc:     &[]wax.MemIdx{0x00}[0],
							},
							&wax.Export{
								Nm: wax.Name(string([]byte{
									0x5f, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
									0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
								})),
								DescType: wax.ExportDescTypeTable,
								Desc:     &[]wax.TableIdx{0x00}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x5f, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65})),
								DescType: wax.ExportDescTypeGlobal,
								Desc:     &[]wax.GlobalIdx{0x01}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64})),
								DescType: wax.ExportDescTypeGlobal,
								Desc:     &[]wax.GlobalIdx{0x02}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x61, 0x64, 0x64})),
								DescType: wax.ExportDescTypeFunc,
								Desc:     &[]wax.FuncIdx{0x01}[0],
							},
						},
					},
					&wax.CodeSection{
						SectionBase: wax.SectionBase{
							ID:      wax.CodeSectionID,
							Size:    0x0c,
							Content: []byte{0x02, 0x02, 0x00, 0x0b, 0x07, 0x00, 0x20, 0x01, 0x20, 0x00, 0x6a, 0x0b},
						},
						Code: []wax.Code{
							wax.Code{
								Size: 0x02,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{},
									Body: wax.Expr{
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
							wax.Code{
								Size: 0x07,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{},
									Body: wax.Expr{
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x01, LocalIdxBytes: []byte{0x01}},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x00, LocalIdxBytes: []byte{0x00}},
										&wax.InstrI32Add{Opcode: wax.Opcode(0x6a)},
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
						},
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x1b,
							Content: []byte{
								0x01, 0x19, 0x02, 0x00, 0x11, 0x5f, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
								0x5f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x01, 0x03, 0x61, 0x64, 0x64,
							},
						},
						Name: wax.Name(string([]byte{0x6e, 0x61, 0x6d, 0x65})),
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x47,
							Content: []byte{
								0x02, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x01, 0x04, 0x52, 0x75, 0x73, 0x74,
								0x04, 0x32, 0x30, 0x31, 0x35, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x2d,
								0x62, 0x79, 0x01, 0x05, 0x72, 0x75, 0x73, 0x74, 0x63, 0x1d, 0x31, 0x2e, 0x33, 0x32, 0x2e, 0x30,
								0x20, 0x28, 0x39, 0x66, 0x64, 0x61, 0x37, 0x63, 0x32, 0x32, 0x33, 0x20, 0x32, 0x30, 0x31, 0x39,
								0x2d, 0x30, 0x31, 0x2d, 0x31, 0x36, 0x29,
							},
						},
						Name: wax.Name(string([]byte{0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73})),
					},
				},
			},
		},
		{
			Name: "pattern 2 - tinygo examples/go/add/main.go",
			Wasm: []byte{
				// magic + version
				0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,

				// Type section
				0x01, 0x15,
				0x04, 0x60, 0x00, 0x01, 0x7f, 0x60, 0x00, 0x00, 0x60, 0x03, 0x7f, 0x7f, 0x7f, 0x01, 0x7f, 0x60,
				0x02, 0x7f, 0x7f, 0x01, 0x7f,

				// Import section
				0x02, 0x15,
				0x01, 0x03, 0x65, 0x6e, 0x76, 0x0d, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x64,
				0x6f, 0x75, 0x74, 0x00, 0x00,

				// Function section
				0x03, 0x06,
				0x05, 0x01, 0x01, 0x01, 0x02, 0x03,

				// Table section
				0x04, 0x05,
				0x01, 0x70, 0x01, 0x01, 0x01,

				// Memory section
				0x05, 0x03,
				0x01, 0x00, 0x02,

				// Global section
				0x06, 0x15,
				0x03, 0x7f, 0x01, 0x41, 0x80, 0x88, 0x04, 0x0b, 0x7f, 0x00, 0x41, 0x80, 0x88, 0x04, 0x0b, 0x7f,
				0x00, 0x41, 0x80, 0x08, 0x0b,

				// Export section
				0x07, 0x48,
				0x07, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x0b, 0x5f, 0x5f, 0x68, 0x65, 0x61,
				0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x03, 0x01, 0x0a, 0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
				0x65, 0x6e, 0x64, 0x03, 0x02, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x02, 0x08, 0x63,
				0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x03, 0x06, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74,
				0x00, 0x04, 0x03, 0x61, 0x64, 0x64, 0x00, 0x05,

				// Code section
				0x0a, 0x4d,
				0x05, 0x02, 0x00, 0x0b, 0x09, 0x00, 0x10, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1a, 0x0b, 0x09, 0x00,
				0x10, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1a, 0x0b, 0x2c, 0x01, 0x01, 0x7f, 0x20, 0x00, 0x21, 0x03,
				0x02, 0x40, 0x03, 0x40, 0x20, 0x02, 0x45, 0x0d, 0x01, 0x20, 0x03, 0x20, 0x01, 0x3a, 0x00, 0x00,
				0x20, 0x03, 0x41, 0x01, 0x6a, 0x21, 0x03, 0x20, 0x02, 0x41, 0x7f, 0x6a, 0x21, 0x02, 0x0c, 0x00,
				0x0b, 0x0b, 0x20, 0x00, 0x0b, 0x07, 0x00, 0x20, 0x01, 0x20, 0x00, 0x6a, 0x0b,

				// Custom section
				0x00, 0x84, 0x02, // 0x02 0x84 => 0000 0010 1000 0100 => 000 0010 000 0100 => 00 0001 0000 0100 => 0x0104 => 260
				0x0b, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0xf4, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x07, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1e,
				0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x02, 0x0b, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00, 0x09,
				0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x01, 0x1a, 0x04, 0x22, 0x00,
				0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x1b, 0x00, 0x03, 0x0f, 0x00,
				0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x01, 0x1f,
				0x04, 0x22, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00,
				0x05, 0x19, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00,
				0x00, 0x01, 0x3d, 0xdb, 0x00, 0x00, 0x00, 0x06, 0xa6, 0x00, 0x00, 0x00, 0x01, 0x3d, 0xdb, 0x00,
				0x00, 0x00, 0x06, 0xaa, 0x00, 0x00, 0x00, 0x01, 0x3d, 0xe9, 0x00, 0x00, 0x00, 0x06, 0xb1, 0x00,
				0x00, 0x00, 0x01, 0x3d, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x46, 0x00, 0x00, 0x00, 0x07, 0x00,
				0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x07, 0xe2, 0x00, 0x00, 0x00,
				0x06, 0xbe, 0x00, 0x00, 0x00, 0x03, 0x07, 0xe2, 0x00, 0x00, 0x00, 0x06, 0xc0, 0x00, 0x00, 0x00,
				0x03, 0x07, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x07, 0x74, 0x00, 0x00, 0x00, 0x01, 0x04, 0x07, 0xa2,
				0x00, 0x00, 0x00, 0x05, 0x04, 0x07, 0xac, 0x00, 0x00, 0x00, 0x07, 0x01, 0x07, 0xb6, 0x00, 0x00,
				0x00, 0x07, 0x04, 0x00,

				// Custom section
				0x00, 0x10,
				0x0e, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x00,

				// Custom section
				0x00, 0x52,
				0x0f, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73,
				0x3e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xdb, 0x00,
				0x00, 0x00, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
				0x00, 0xe9, 0x00, 0x00, 0x00, 0x62, 0x79, 0x74, 0x65, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x75, 0x69,
				0x6e, 0x74, 0x70, 0x74, 0x72, 0x00, 0xe2, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x74, 0x00, 0x00, 0x00,
				0x00, 0x00,

				// Custom section
				0x00, 0x36,
				0x0d, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x05, 0x00,
				0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x19, 0x00,
				0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				// Custom section
				0x00, 0x7d,
				0x0d, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x01, 0x11,
				0x01, 0x25, 0x0e, 0x13, 0x05, 0x03, 0x0e, 0x10, 0x17, 0xb4, 0x42, 0x19, 0x11, 0x01, 0x55, 0x17,
				0x00, 0x00, 0x02, 0x2e, 0x00, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x20, 0x0b, 0x00,
				0x00, 0x03, 0x2e, 0x01, 0x11, 0x01, 0x12, 0x06, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b,
				0x00, 0x00, 0x04, 0x1d, 0x00, 0x31, 0x13, 0x11, 0x01, 0x12, 0x06, 0x58, 0x0b, 0x59, 0x0b, 0x00,
				0x00, 0x05, 0x2e, 0x01, 0x11, 0x01, 0x12, 0x06, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b,
				0x49, 0x13, 0x00, 0x00, 0x06, 0x05, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x00,
				0x00, 0x07, 0x24, 0x00, 0x03, 0x0e, 0x3e, 0x0b, 0x0b, 0x0b, 0x00, 0x00, 0x00,

				// Custom section
				0x00, 0x9c, 0x02, // 0x02 0x9c => 0000 0010 1001 1100 => 000 0010 001 1100 => 00 0001 0001 1100 => 0x011c == 284
				0x0b, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x0c, 0x01, 0x00, 0x00,
				0x04, 0x00, 0x88, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0xfb, 0x0e, 0x0d, 0x00, 0x01, 0x01, 0x01,
				0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x69, 0x74, 0x68,
				0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x67, 0x6f, 0x2d, 0x6f, 0x72,
				0x67, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x75, 0x6e,
				0x74, 0x69, 0x6d, 0x65, 0x00, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
				0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x72, 0x61, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x78, 0x00,
				0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x67, 0x6f,
				0x00, 0x01, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x67, 0x6f, 0x00, 0x01,
				0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x05,
				0x02, 0x05, 0x00, 0x00, 0x00, 0x11, 0x04, 0x02, 0x05, 0x06, 0x0a, 0x03, 0x0b, 0x20, 0x04, 0x01,
				0x05, 0x00, 0x06, 0x03, 0x75, 0x74, 0x02, 0x01, 0x00, 0x01, 0x01, 0x00, 0x05, 0x02, 0x0f, 0x00,
				0x00, 0x00, 0x11, 0x04, 0x02, 0x05, 0x06, 0x0a, 0x03, 0x0b, 0x20, 0x04, 0x01, 0x05, 0x00, 0x06,
				0x03, 0x75, 0x74, 0x02, 0x01, 0x00, 0x01, 0x01, 0x00, 0x05, 0x02, 0x19, 0x00, 0x00, 0x00, 0x11,
				0x05, 0x06, 0x0a, 0x03, 0x3e, 0x3c, 0x05, 0x00, 0x06, 0x03, 0x42, 0x4a, 0x05, 0x03, 0x06, 0x03,
				0x3f, 0x90, 0x05, 0x00, 0x06, 0x03, 0x41, 0x74, 0x05, 0x02, 0x06, 0x03, 0xc1, 0x00, 0x08, 0x20,
				0x02, 0x03, 0x00, 0x01, 0x01, 0x04, 0x03, 0x00, 0x05, 0x02, 0x46, 0x00, 0x00, 0x00, 0x11, 0x05,
				0x0b, 0x0a, 0x28, 0x05, 0x02, 0x06, 0x58, 0x02, 0x01, 0x00, 0x01, 0x01,

				// Custom section
				0x00, 0xcd, 0x01, // 0x01 0xcd => 0000 0001 1100 1101 => 000 0001 100 1101 => 00 0000 1100 1101 => 0xcd == 205
				0x0a, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x54, 0x69, 0x6e, 0x79, 0x47,
				0x6f, 0x00, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x72,
				0x61, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x78, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
				0x2e, 0x69, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x00, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00,
				0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x63,
				0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
				0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x00,
				0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x00, 0x75,
				0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x00, 0x61, 0x64,
				0x64, 0x00, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x72,
				0x61, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x78, 0x2e, 0x61, 0x64, 0x64, 0x00, 0x69, 0x6e, 0x74,
				0x00, 0x70, 0x74, 0x72, 0x00, 0x63, 0x00, 0x62, 0x79, 0x74, 0x65, 0x00, 0x73, 0x69, 0x7a, 0x65,
				0x00, 0x75, 0x69, 0x6e, 0x74, 0x70, 0x74, 0x72, 0x00, 0x61, 0x00, 0x62, 0x00,

				// Custom section
				0x00, 0x90, 0x01, // 0x01 0x90 => 0000 0001 1001 0000 => 000 0001 001 0000 => 00 0000 1001 0000 => 0x90 == 144
				0x0f, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x73,
				0x7c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x2e, 0x00,
				0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
				0x00, 0x51, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x77, 0x61,
				0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0xad, 0x00, 0x00, 0x00, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
				0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x72, 0x61, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x78,
				0x2e, 0x61, 0x64, 0x64, 0x00, 0x74, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
				0x2e, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x00, 0x22, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74,
				0x69, 0x6d, 0x65, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,

				// Custom section
				0x00, 0x49,
				0x04, 0x6e, 0x61, 0x6d, 0x65, 0x01, 0x42, 0x06, 0x00, 0x0d, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74,
				0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x01, 0x11, 0x5f, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x5f,
				0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x02, 0x06, 0x5f, 0x73, 0x74, 0x61,
				0x72, 0x74, 0x03, 0x08, 0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x04, 0x06, 0x6d, 0x65,
				0x6d, 0x73, 0x65, 0x74, 0x05, 0x03, 0x61, 0x64, 0x64,
			},
			Expected: &wax.Module{
				Preamble: wax.Preamble{
					MagicNumber: 0x6d736100,
					Version:     0x00000001,
				},
				Sections: []wax.Section{
					&wax.TypeSection{ // 01 15 04 60 00 01 7f 60 00 00 60 03 7f 7f 7f 01 7f 60 02 7f 7f 01 7f
						SectionBase: wax.SectionBase{
							ID:   wax.TypeSectionID,
							Size: 0x15,
							Content: []byte{
								0x04,
								0x60, 0x00, 0x01, 0x7f,
								0x60, 0x00, 0x00,
								0x60, 0x03, 0x7f, 0x7f, 0x7f, 0x01, 0x7f,
								0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f,
							},
						},
						FuncTypes: []*wax.FuncType{
							&wax.FuncType{
								ParamTypes:  []wax.ValType{},
								ReturnTypes: []wax.ValType{0x7f},
							},
							&wax.FuncType{
								ParamTypes:  []wax.ValType{},
								ReturnTypes: []wax.ValType{},
							},
							&wax.FuncType{
								ParamTypes:  []wax.ValType{0x7f, 0x7f, 0x7f},
								ReturnTypes: []wax.ValType{0x7f},
							},
							&wax.FuncType{
								ParamTypes:  []wax.ValType{0x7f, 0x7f},
								ReturnTypes: []wax.ValType{0x7f},
							},
						},
					},
					&wax.ImportSection{ // 02 15 01 03 65 6e 76 0d 69 6f 5f 67 65 74 5f 73 74 64 6f 75 74 00 00
						SectionBase: wax.SectionBase{
							ID:      wax.ImportSectionID,
							Size:    0x15,
							Content: []byte{0x01, 0x03, 0x65, 0x6e, 0x76, 0x0d, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x00, 0x00},
						},
						Imports: []*wax.Import{
							&wax.Import{
								Mod:  wax.Name("env"),
								Nm:   wax.Name(string([]byte{0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74})),
								Desc: wax.TypeIdx(0x00),
							},
						},
					},
					&wax.FunctionSection{ // 03 06 05 01 01 01 02 03
						SectionBase: wax.SectionBase{
							ID:      wax.FunctionSectionID,
							Size:    0x06,
							Content: []byte{0x05, 0x01, 0x01, 0x01, 0x02, 0x03},
						},
						Types: []wax.TypeIdx{0x01, 0x01, 0x01, 0x02, 0x03},
					},
					&wax.TableSection{ // 04 05 01 70 01 01 01
						SectionBase: wax.SectionBase{
							ID:      wax.TableSectionID,
							Size:    0x05,
							Content: []byte{0x01, 0x70, 0x01, 0x01, 0x01},
						},
						TableTypes: []*wax.TableType{
							&wax.TableType{
								ElementType: wax.ElemType(0x70),
								Limits: wax.Limits{
									Min: 0x01,
									Max: &[]uint32{0x01}[0],
								},
							},
						},
					},
					&wax.MemorySection{ // 05 03 01 00 02
						SectionBase: wax.SectionBase{
							ID:      wax.MemorySectionID,
							Size:    0x03,
							Content: []byte{0x01, 0x00, 0x02},
						},
						MemTypes: []*wax.MemType{
							&wax.MemType{
								Limits: wax.Limits{
									Min: 0x02,
								},
							},
						},
					},
					&wax.GlobalSection{ // 06 15 03 7f 01 41 80 88 04 0b 7f 00 41 80 88 04 0b 7f 00 41 80 08 0b
						SectionBase: wax.SectionBase{
							ID:   wax.GlobalSectionID,
							Size: 0x15,
							Content: []byte{
								0x03,
								0x7f, 0x01, 0x41, 0x80, 0x88, 0x04, 0x0b,
								0x7f, 0x00, 0x41, 0x80, 0x88, 0x04, 0x0b,
								0x7f, 0x00, 0x41, 0x80, 0x08, 0x0b,
							},
						},
						Globals: []*wax.Global{
							&wax.Global{
								Type: wax.GlobalType{
									R: wax.ValType(0x7f),
									M: 0x01,
								},
								Init: wax.InitExpr{0x41, 0x80, 0x88, 0x04, 0x0b},
							},
							&wax.Global{
								Type: wax.GlobalType{
									R: wax.ValType(0x7f),
									M: 0x00,
								},
								Init: wax.InitExpr{0x41, 0x80, 0x88, 0x04, 0x0b},
							},
							&wax.Global{
								Type: wax.GlobalType{
									R: wax.ValType(0x7f),
									M: 0x00,
								},
								Init: wax.InitExpr{0x41, 0x80, 0x08, 0x0b},
							},
						},
					},
					&wax.ExportSection{
						SectionBase: wax.SectionBase{
							ID:   wax.ExportSectionID,
							Size: 0x48,
							Content: []byte{
								0x07, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x0b, 0x5f, 0x5f, 0x68, 0x65, 0x61,
								0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x03, 0x01, 0x0a, 0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
								0x65, 0x6e, 0x64, 0x03, 0x02, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x02, 0x08, 0x63,
								0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x03, 0x06, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74,
								0x00, 0x04, 0x03, 0x61, 0x64, 0x64, 0x00, 0x05,
							},
						},
						Exports: []*wax.Export{
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79})),
								DescType: wax.ExportDescTypeMem,
								Desc:     &[]wax.MemIdx{0x00}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x5f, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65})),
								DescType: wax.ExportDescTypeGlobal,
								Desc:     &[]wax.GlobalIdx{0x01}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64})),
								DescType: wax.ExportDescTypeGlobal,
								Desc:     &[]wax.GlobalIdx{0x02}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x5f, 0x73, 0x74, 0x61, 0x72, 0x74})),
								DescType: wax.ExportDescTypeFunc,
								Desc:     &[]wax.FuncIdx{0x02}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e})),
								DescType: wax.ExportDescTypeFunc,
								Desc:     &[]wax.FuncIdx{0x03}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74})),
								DescType: wax.ExportDescTypeFunc,
								Desc:     &[]wax.FuncIdx{0x04}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x61, 0x64, 0x64})),
								DescType: wax.ExportDescTypeFunc,
								Desc:     &[]wax.FuncIdx{0x05}[0],
							},
						},
					},
					&wax.CodeSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CodeSectionID,
							Size: 0x4d,
							Content: []byte{
								0x05, 0x02, 0x00, 0x0b, 0x09, 0x00, 0x10, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1a, 0x0b, 0x09, 0x00,
								0x10, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1a, 0x0b, 0x2c, 0x01, 0x01, 0x7f, 0x20, 0x00, 0x21, 0x03,
								0x02, 0x40, 0x03, 0x40, 0x20, 0x02, 0x45, 0x0d, 0x01, 0x20, 0x03, 0x20, 0x01, 0x3a, 0x00, 0x00,
								0x20, 0x03, 0x41, 0x01, 0x6a, 0x21, 0x03, 0x20, 0x02, 0x41, 0x7f, 0x6a, 0x21, 0x02, 0x0c, 0x00,
								0x0b, 0x0b, 0x20, 0x00, 0x0b, 0x07, 0x00, 0x20, 0x01, 0x20, 0x00, 0x6a, 0x0b,
							},
						},
						Code: []wax.Code{
							wax.Code{
								Size: 0x02,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{},
									Body: wax.Expr{
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
							wax.Code{
								Size: 0x09,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{},
									Body: wax.Expr{
										&wax.InstrCall{Opcode: wax.Opcode(0x10), FuncIdx: wax.FuncIdx(0), FuncIdxBytes: []byte{0x80, 0x80, 0x80, 0x80, 0x00}},
										&wax.InstrDrop{Opcode: wax.Opcode(0x1a)},
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
							wax.Code{
								Size: 0x09,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{},
									Body: wax.Expr{
										&wax.InstrCall{Opcode: wax.Opcode(0x10), FuncIdx: wax.FuncIdx(0), FuncIdxBytes: []byte{0x80, 0x80, 0x80, 0x80, 0x00}},
										&wax.InstrDrop{Opcode: wax.Opcode(0x1a)},
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
							wax.Code{
								Size: 0x2c,
								Code: wax.Func{
									Type: 0,
									Locals: []wax.ValType{
										wax.ValType(0x7f),
									},
									Body: wax.Expr{
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: wax.LocalIdx(0), LocalIdxBytes: []byte{0x00}},
										&wax.InstrLocalSet{Opcode: wax.Opcode(0x21), LocalIdx: wax.LocalIdx(3), LocalIdxBytes: []byte{0x03}},
										&wax.InstrBlock{
											Opcode:    wax.Opcode(0x02),
											BlockType: wax.BlockType(0x40),
											Instructions: []wax.Instr{
												&wax.InstrLoop{Opcode: wax.Opcode(0x03), BlockType: wax.BlockType(0x40), Instructions: []wax.Instr{
													&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: wax.LocalIdx(02), LocalIdxBytes: []byte{0x02}},
													&wax.InstrI32Eqz{Opcode: wax.Opcode(0x45)},
													&wax.InstrBrIf{Opcode: wax.Opcode(0x0d), LabelIdx: wax.LabelIdx(0x01), LabelIdxBytes: []byte{0x01}},
													&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: wax.LocalIdx(03), LocalIdxBytes: []byte{0x03}},
													&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: wax.LocalIdx(01), LocalIdxBytes: []byte{0x01}},
													&wax.InstrI32Store8{Opcode: wax.Opcode(0x3a), MemArg: wax.MemArg{Align: 0x00, Offset: 0x00}, MemArgBytes: []byte{0x00, 0x00}},
													&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: wax.LocalIdx(03), LocalIdxBytes: []byte{0x03}},
													&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x01, NBytes: []byte{0x01}},
													&wax.InstrI32Add{Opcode: wax.Opcode(0x6a)},
													&wax.InstrLocalGet{Opcode: wax.Opcode(0x21), LocalIdx: wax.LocalIdx(03), LocalIdxBytes: []byte{0x03}},
													&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: wax.LocalIdx(02), LocalIdxBytes: []byte{0x02}},
													&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x7f, NBytes: []byte{0x7f}},
													&wax.InstrI32Add{Opcode: wax.Opcode(0x6a)},
													&wax.InstrLocalGet{Opcode: wax.Opcode(0x21), LocalIdx: wax.LocalIdx(02), LocalIdxBytes: []byte{0x02}},
													&wax.InstrBr{Opcode: wax.Opcode(0x0c), LabelIdx: wax.LabelIdx(0x00), LabelIdxBytes: []byte{0x00}},
													&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
												}},
												&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
											},
										},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: wax.LocalIdx(0x00), LocalIdxBytes: []byte{0x00}},
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
							wax.Code{
								Size: 0x07,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{},
									Body: wax.Expr{
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: wax.LocalIdx(0x01), LocalIdxBytes: []byte{0x01}},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: wax.LocalIdx(0x00), LocalIdxBytes: []byte{0x00}},
										&wax.InstrI32Add{Opcode: wax.Opcode(0x6a)},
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
						},
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0xf8,
							Content: []byte{
								0xf4, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,
								0x17, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x02, 0x1e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x02, 0x0b, 0x01, 0x03, 0x05,
								0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x01,
								0x1a, 0x04, 0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x1b,
								0x00, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x4d, 0x00,
								0x00, 0x00, 0x01, 0x1f, 0x04, 0x22, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
								0x00, 0x01, 0x20, 0x00, 0x05, 0x19, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00,
								0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x3d, 0xdb, 0x00, 0x00, 0x00, 0x06, 0xa6, 0x00, 0x00, 0x00,
								0x01, 0x3d, 0xdb, 0x00, 0x00, 0x00, 0x06, 0xaa, 0x00, 0x00, 0x00, 0x01, 0x3d, 0xe9, 0x00, 0x00,
								0x00, 0x06, 0xb1, 0x00, 0x00, 0x00, 0x01, 0x3d, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x05, 0x46, 0x00,
								0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x07,
								0xe2, 0x00, 0x00, 0x00, 0x06, 0xbe, 0x00, 0x00, 0x00, 0x03, 0x07, 0xe2, 0x00, 0x00, 0x00, 0x06,
								0xc0, 0x00, 0x00, 0x00, 0x03, 0x07, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x07, 0x74, 0x00, 0x00, 0x00,
								0x01, 0x04, 0x07, 0xa2, 0x00, 0x00, 0x00, 0x05, 0x04, 0x07, 0xac, 0x00, 0x00, 0x00, 0x07, 0x01,
								0x07, 0xb6, 0x00, 0x00, 0x00, 0x07, 0x04, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f})),
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:      wax.CustomSectionID,
							Size:    0x1,
							Content: []byte{0x00},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x63, 0x69, 0x6e, 0x66, 0x6f})),
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x42,
							Content: []byte{
								0x3e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xdb, 0x00,
								0x00, 0x00, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
								0x00, 0xe9, 0x00, 0x00, 0x00, 0x62, 0x79, 0x74, 0x65, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x75, 0x69,
								0x6e, 0x74, 0x70, 0x74, 0x72, 0x00, 0xe2, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x74, 0x00, 0x00, 0x00,
								0x00, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73})),
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x28,
							Content: []byte{
								0x05, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
								0x19, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73})),
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x6f,
							Content: []byte{
								0x01, 0x11, 0x01, 0x25, 0x0e, 0x13, 0x05, 0x03, 0x0e, 0x10, 0x17, 0xb4, 0x42, 0x19, 0x11, 0x01,
								0x55, 0x17, 0x00, 0x00, 0x02, 0x2e, 0x00, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x20,
								0x0b, 0x00, 0x00, 0x03, 0x2e, 0x01, 0x11, 0x01, 0x12, 0x06, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b,
								0x3b, 0x0b, 0x00, 0x00, 0x04, 0x1d, 0x00, 0x31, 0x13, 0x11, 0x01, 0x12, 0x06, 0x58, 0x0b, 0x59,
								0x0b, 0x00, 0x00, 0x05, 0x2e, 0x01, 0x11, 0x01, 0x12, 0x06, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b,
								0x3b, 0x0b, 0x49, 0x13, 0x00, 0x00, 0x06, 0x05, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49,
								0x13, 0x00, 0x00, 0x07, 0x24, 0x00, 0x03, 0x0e, 0x3e, 0x0b, 0x0b, 0x0b, 0x00, 0x00, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76})),
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x110,
							Content: []byte{
								0x0c, 0x01, 0x00, 0x00, 0x04, 0x00, 0x88, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0xfb, 0x0e, 0x0d,
								0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x73, 0x72, 0x63, 0x2f,
								0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x67,
								0x6f, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63,
								0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x00, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x69, 0x74,
								0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x72, 0x61, 0x63, 0x6f, 0x6d, 0x2f,
								0x77, 0x61, 0x78, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x61, 0x73,
								0x6d, 0x2e, 0x67, 0x6f, 0x00, 0x01, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
								0x67, 0x6f, 0x00, 0x01, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x00, 0x02, 0x00,
								0x00, 0x00, 0x00, 0x05, 0x02, 0x05, 0x00, 0x00, 0x00, 0x11, 0x04, 0x02, 0x05, 0x06, 0x0a, 0x03,
								0x0b, 0x20, 0x04, 0x01, 0x05, 0x00, 0x06, 0x03, 0x75, 0x74, 0x02, 0x01, 0x00, 0x01, 0x01, 0x00,
								0x05, 0x02, 0x0f, 0x00, 0x00, 0x00, 0x11, 0x04, 0x02, 0x05, 0x06, 0x0a, 0x03, 0x0b, 0x20, 0x04,
								0x01, 0x05, 0x00, 0x06, 0x03, 0x75, 0x74, 0x02, 0x01, 0x00, 0x01, 0x01, 0x00, 0x05, 0x02, 0x19,
								0x00, 0x00, 0x00, 0x11, 0x05, 0x06, 0x0a, 0x03, 0x3e, 0x3c, 0x05, 0x00, 0x06, 0x03, 0x42, 0x4a,
								0x05, 0x03, 0x06, 0x03, 0x3f, 0x90, 0x05, 0x00, 0x06, 0x03, 0x41, 0x74, 0x05, 0x02, 0x06, 0x03,
								0xc1, 0x00, 0x08, 0x20, 0x02, 0x03, 0x00, 0x01, 0x01, 0x04, 0x03, 0x00, 0x05, 0x02, 0x46, 0x00,
								0x00, 0x00, 0x11, 0x05, 0x0b, 0x0a, 0x28, 0x05, 0x02, 0x06, 0x58, 0x02, 0x01, 0x00, 0x01, 0x01,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65})),
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0xc2,
							Content: []byte{
								0x54, 0x69, 0x6e, 0x79, 0x47, 0x6f, 0x00, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
								0x6d, 0x2f, 0x73, 0x6f, 0x72, 0x61, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x78, 0x00, 0x72, 0x75,
								0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x00, 0x5f, 0x73,
								0x74, 0x61, 0x72, 0x74, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x5f, 0x73, 0x74,
								0x61, 0x72, 0x74, 0x00, 0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x72, 0x75, 0x6e,
								0x74, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x6d, 0x65,
								0x6d, 0x73, 0x65, 0x74, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x65, 0x6d,
								0x73, 0x65, 0x74, 0x00, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
								0x65, 0x72, 0x00, 0x61, 0x64, 0x64, 0x00, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
								0x6d, 0x2f, 0x73, 0x6f, 0x72, 0x61, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x78, 0x2e, 0x61, 0x64,
								0x64, 0x00, 0x69, 0x6e, 0x74, 0x00, 0x70, 0x74, 0x72, 0x00, 0x63, 0x00, 0x62, 0x79, 0x74, 0x65,
								0x00, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x75, 0x69, 0x6e, 0x74, 0x70, 0x74, 0x72, 0x00, 0x61, 0x00,
								0x62, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72})),
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x80,
							Content: []byte{
								0x7c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x2e, 0x00,
								0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
								0x00, 0x51, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x77, 0x61,
								0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0xad, 0x00, 0x00, 0x00, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
								0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x72, 0x61, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x78,
								0x2e, 0x61, 0x64, 0x64, 0x00, 0x74, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
								0x2e, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x00, 0x22, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74,
								0x69, 0x6d, 0x65, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x73})),
					},
					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x44,
							Content: []byte{
								0x01, 0x42, 0x06, 0x00, 0x0d, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x6f,
								0x75, 0x74, 0x01, 0x11, 0x5f, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
								0x63, 0x74, 0x6f, 0x72, 0x73, 0x02, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x03, 0x08, 0x63,
								0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x04, 0x06, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x05,
								0x03, 0x61, 0x64, 0x64,
							},
						},
						Name: wax.Name(string([]byte{0x6e, 0x61, 0x6d, 0x65})),
					},
				},
			},
		},
		{
			Name: "pattern 3 - tinygo examples/go/loop/main.go",
			Wasm: []byte{
				// magic + version
				0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,

				// Type section
				0x01, 0x15,
				0x04, 0x60, 0x00, 0x01, 0x7f, 0x60, 0x00, 0x00, 0x60, 0x03, 0x7f, 0x7f, 0x7f, 0x01, 0x7f, 0x60,
				0x02, 0x7f, 0x7f, 0x01, 0x7f,

				// Import section
				0x02, 0x15,
				0x01, 0x03, 0x65, 0x6e, 0x76, 0x0d, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x64,
				0x6f, 0x75, 0x74, 0x00, 0x00,

				// Function section
				0x03, 0x07,
				0x06, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03,

				// Table section
				0x04, 0x05,
				0x01, 0x70, 0x01, 0x01, 0x01,

				// Memory section
				0x05, 0x03,
				0x01, 0x00, 0x02,

				// Global section
				0x06, 0x15,
				0x03, 0x7f, 0x01, 0x41, 0x90, 0x88, 0x04, 0x0b, 0x7f, 0x00, 0x41, 0x90, 0x88, 0x04, 0x0b, 0x7f,
				0x00, 0x41, 0x84, 0x08, 0x0b,

				// Export section
				0x07, 0x60,
				0x08, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x0b, 0x5f, 0x5f, 0x68, 0x65, 0x61,
				0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x03, 0x01, 0x0a, 0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
				0x65, 0x6e, 0x64, 0x03, 0x02, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x02, 0x08, 0x63,
				0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x03, 0x06, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74,
				0x00, 0x04, 0x0d, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
				0x00, 0x05, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x00, 0x06,

				// Code section
				0x0a, 0xa6, 0x01, // 0x01 0xa6 => 0000 0001 1010 0110 => 000 0001 010 0110 => 00 0000 1010 0110 => 0x00a6
				0x06, 0x02, 0x00, 0x0b, 0x09, 0x00, 0x10, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1a, 0x0b, 0x09, 0x00,
				0x10, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1a, 0x0b, 0x2c, 0x01, 0x01, 0x7f, 0x20, 0x00, 0x21, 0x03,
				0x02, 0x40, 0x03, 0x40, 0x20, 0x02, 0x45, 0x0d, 0x01, 0x20, 0x03, 0x20, 0x01, 0x3a, 0x00, 0x00,
				0x20, 0x03, 0x41, 0x01, 0x6a, 0x21, 0x03, 0x20, 0x02, 0x41, 0x7f, 0x6a, 0x21, 0x02, 0x0c, 0x00,
				0x0b, 0x0b, 0x20, 0x00, 0x0b, 0x26, 0x01, 0x01, 0x7f, 0x41, 0x00, 0x21, 0x00, 0x03, 0x40, 0x41,
				0x00, 0x20, 0x00, 0x36, 0x02, 0x80, 0x88, 0x80, 0x80, 0x00, 0x41, 0x00, 0x28, 0x02, 0x80, 0x88,
				0x80, 0x80, 0x00, 0x41, 0x01, 0x6a, 0x21, 0x00, 0x0c, 0x00, 0x0b, 0x0b, 0x39, 0x00, 0x20, 0x01,
				0x41, 0x00, 0x20, 0x01, 0x41, 0x00, 0x4a, 0x1b, 0x22, 0x01, 0x20, 0x00, 0x41, 0x00, 0x20, 0x00,
				0x41, 0x00, 0x4a, 0x1b, 0x22, 0x00, 0xad, 0x20, 0x00, 0x41, 0x7f, 0x6a, 0xad, 0x7e, 0x42, 0x01,
				0x88, 0xa7, 0x6c, 0x20, 0x00, 0x20, 0x01, 0xad, 0x20, 0x01, 0x41, 0x7f, 0x6a, 0xad, 0x7e, 0x42,
				0x01, 0x88, 0xa7, 0x6c, 0x6a, 0x0b,

				// Data section
				0x0b, 0x0b,
				0x01, 0x00, 0x41, 0x80, 0x08, 0x0b, 0x04, 0x00, 0x00, 0x00, 0x00,

				// Custom section
				0x00, 0x97, 0x02, // 0x02 0x97 => 0000 0010 1001 0111 => 000 0010 001 0111 => 00 0001 0001 0111 => 0x0117
				0x0b, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x07, 0x01, 0x00, 0x00,
				0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x07, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14,
				0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x0b, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00, 0x09,
				0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x01, 0x1a, 0x04, 0x22, 0x00,
				0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x1b, 0x00, 0x03, 0x0f, 0x00,
				0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x01, 0x1f,
				0x04, 0x22, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x20, 0x00,
				0x05, 0x19, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00,
				0x00, 0x01, 0x3d, 0xee, 0x00, 0x00, 0x00, 0x06, 0xbd, 0x00, 0x00, 0x00, 0x01, 0x3d, 0xee, 0x00,
				0x00, 0x00, 0x06, 0xc1, 0x00, 0x00, 0x00, 0x01, 0x3d, 0xfc, 0x00, 0x00, 0x00, 0x06, 0xc8, 0x00,
				0x00, 0x00, 0x01, 0x3d, 0x03, 0x01, 0x00, 0x00, 0x00, 0x07, 0x46, 0x00, 0x00, 0x00, 0x26, 0x00,
				0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x05, 0x6d, 0x00, 0x00,
				0x00, 0x39, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0x03, 0x14, 0xf5,
				0x00, 0x00, 0x00, 0x06, 0xd5, 0x00, 0x00, 0x00, 0x03, 0x14, 0xf5, 0x00, 0x00, 0x00, 0x06, 0xda,
				0x00, 0x00, 0x00, 0x03, 0x14, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x08, 0x6a, 0x00, 0x00, 0x00, 0x01,
				0x04, 0x08, 0xb9, 0x00, 0x00, 0x00, 0x05, 0x04, 0x08, 0xc3, 0x00, 0x00, 0x00, 0x07, 0x01, 0x08,
				0xcd, 0x00, 0x00, 0x00, 0x07, 0x04, 0x00,

				// Custom section
				0x00, 0x10,
				0x0e, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x00,

				// Custom section
				0x00, 0x52,
				0x0f, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73,
				0x3e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0xee, 0x00,
				0x00, 0x00, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
				0x00, 0xfc, 0x00, 0x00, 0x00, 0x62, 0x79, 0x74, 0x65, 0x00, 0x03, 0x01, 0x00, 0x00, 0x75, 0x69,
				0x6e, 0x74, 0x70, 0x74, 0x72, 0x00, 0xf5, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x74, 0x00, 0x00, 0x00,
				0x00, 0x00,

				// Custom section
				0x00, 0x3e,
				0x0d, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x05, 0x00,
				0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x19, 0x00,
				0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x6d, 0x00,
				0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

				// Custom section
				0x00, 0x8e, 0x01, // 0x01 0x8e => 0000 0001 1000 1110 => 000 0001 000 1110 => 00 0000 1000 1110 => 0x8e
				0x0d, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x01, 0x11,
				0x01, 0x25, 0x0e, 0x13, 0x05, 0x03, 0x0e, 0x10, 0x17, 0xb4, 0x42, 0x19, 0x11, 0x01, 0x55, 0x17,
				0x00, 0x00, 0x02, 0x2e, 0x00, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x20, 0x0b, 0x00,
				0x00, 0x03, 0x2e, 0x01, 0x11, 0x01, 0x12, 0x06, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b,
				0x00, 0x00, 0x04, 0x1d, 0x00, 0x31, 0x13, 0x11, 0x01, 0x12, 0x06, 0x58, 0x0b, 0x59, 0x0b, 0x00,
				0x00, 0x05, 0x2e, 0x01, 0x11, 0x01, 0x12, 0x06, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b,
				0x49, 0x13, 0x00, 0x00, 0x06, 0x05, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x00,
				0x00, 0x07, 0x2e, 0x00, 0x11, 0x01, 0x12, 0x06, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b,
				0x00, 0x00, 0x08, 0x24, 0x00, 0x03, 0x0e, 0x3e, 0x0b, 0x0b, 0x0b, 0x00, 0x00, 0x00,

				// Custom section
				0x00, 0xc3, 0x02, // 0x02 0xc3 => 0000 0010 1100 0011 => 000 0010 100 0011 => 00 0001 0100 0011 => 0x143
				0x0b, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x33, 0x01, 0x00, 0x00,
				0x04, 0x00, 0x74, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0xfb, 0x0e, 0x0d, 0x00, 0x01, 0x01, 0x01,
				0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x69, 0x74, 0x68,
				0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x67, 0x6f, 0x2d, 0x6f, 0x72,
				0x67, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x72, 0x75, 0x6e,
				0x74, 0x69, 0x6d, 0x65, 0x00, 0x2e, 0x2e, 0x2f, 0x73, 0x72, 0x63, 0x00, 0x00, 0x72, 0x75, 0x6e,
				0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x67, 0x6f, 0x00, 0x01, 0x00, 0x00,
				0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x67, 0x6f, 0x00, 0x01, 0x00, 0x00, 0x6d, 0x61,
				0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x05, 0x00, 0x00,
				0x00, 0x11, 0x04, 0x02, 0x05, 0x06, 0x0a, 0x03, 0x0b, 0x20, 0x04, 0x01, 0x05, 0x00, 0x06, 0x03,
				0x75, 0x74, 0x02, 0x01, 0x00, 0x01, 0x01, 0x00, 0x05, 0x02, 0x0f, 0x00, 0x00, 0x00, 0x11, 0x04,
				0x02, 0x05, 0x06, 0x0a, 0x03, 0x0b, 0x20, 0x04, 0x01, 0x05, 0x00, 0x06, 0x03, 0x75, 0x74, 0x02,
				0x01, 0x00, 0x01, 0x01, 0x00, 0x05, 0x02, 0x19, 0x00, 0x00, 0x00, 0x11, 0x05, 0x06, 0x0a, 0x03,
				0x3e, 0x3c, 0x05, 0x00, 0x06, 0x03, 0x42, 0x4a, 0x05, 0x03, 0x06, 0x03, 0x3f, 0x90, 0x05, 0x00,
				0x06, 0x03, 0x41, 0x74, 0x05, 0x02, 0x06, 0x03, 0xc1, 0x00, 0x08, 0x20, 0x02, 0x03, 0x00, 0x01,
				0x01, 0x04, 0x03, 0x00, 0x05, 0x02, 0x46, 0x00, 0x00, 0x00, 0x11, 0x0a, 0xac, 0x06, 0x2e, 0x05,
				0x03, 0x06, 0x03, 0x0f, 0x90, 0x05, 0x00, 0x06, 0x03, 0x71, 0xba, 0x02, 0x04, 0x00, 0x01, 0x01,
				0x04, 0x03, 0x00, 0x05, 0x02, 0x6d, 0x00, 0x00, 0x00, 0x11, 0x0a, 0x20, 0x06, 0x4a, 0x4a, 0x20,
				0x3c, 0x4a, 0x4a, 0x20, 0x20, 0x2e, 0x20, 0x4a, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x20, 0x2e, 0x2e,
				0x20, 0x4a, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x20, 0x05, 0x02, 0x06, 0x03, 0x1b, 0x20, 0x02, 0x01,
				0x00, 0x01, 0x01,

				// Custom section
				0x00, 0xea, 0x01, // 0x01 0xea => 0000 0001 1110 1010 => 000 0001 110 1010 => 00 0000 1110 1010 => 0xea
				0x0a, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x54, 0x69, 0x6e, 0x79, 0x47,
				0x6f, 0x00, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x00, 0x72,
				0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x00, 0x5f,
				0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x5f, 0x73,
				0x74, 0x61, 0x72, 0x74, 0x00, 0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x72, 0x75,
				0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x6d,
				0x65, 0x6d, 0x73, 0x65, 0x74, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x6d, 0x65,
				0x6d, 0x73, 0x65, 0x74, 0x00, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
				0x74, 0x65, 0x72, 0x00, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x6f,
				0x70, 0x00, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x2e, 0x6c,
				0x6f, 0x6f, 0x70, 0x31, 0x00, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
				0x00, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x2e, 0x6c, 0x6f,
				0x6f, 0x70, 0x32, 0x00, 0x69, 0x6e, 0x74, 0x00, 0x70, 0x74, 0x72, 0x00, 0x63, 0x00, 0x62, 0x79,
				0x74, 0x65, 0x00, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x75, 0x69, 0x6e, 0x74, 0x70, 0x74, 0x72, 0x00,
				0x6d, 0x61, 0x78, 0x31, 0x00, 0x6d, 0x61, 0x78, 0x32, 0x00,

				// Custom section
				0x00, 0x9f, 0x01, // 0x01 0x9f => 0000 0001 1001 1111 => 000 0001 001 1111 => 00 0000 1001 1111 => 0x9f
				0x0f, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x73,
				0x8b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0x2e, 0x00,
				0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
				0x00, 0x51, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x77, 0x61,
				0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0xad, 0x00, 0x00, 0x00, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d,
				0x61, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x31, 0x00, 0xc0, 0x00, 0x00,
				0x00, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x2e, 0x6c, 0x6f,
				0x6f, 0x70, 0x32, 0x00, 0x74, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
				0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x00, 0x22, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69,
				0x6d, 0x65, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,

				// Custom section
				0x00, 0x60,
				0x04, 0x6e, 0x61, 0x6d, 0x65, 0x01, 0x59, 0x07, 0x00, 0x0d, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74,
				0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x01, 0x11, 0x5f, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x5f,
				0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x02, 0x06, 0x5f, 0x73, 0x74, 0x61,
				0x72, 0x74, 0x03, 0x08, 0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x04, 0x06, 0x6d, 0x65,
				0x6d, 0x73, 0x65, 0x74, 0x05, 0x0d, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x6c,
				0x6f, 0x6f, 0x70, 0x06, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
			},
			Expected: &wax.Module{
				Preamble: wax.Preamble{
					MagicNumber: 0x6d736100,
					Version:     0x00000001,
				},
				Sections: []wax.Section{
					&wax.TypeSection{ // 01 15 04 60 00 01 7f 60 00 00 60 03 7f 7f 7f 01 7f 60 02 7f 7f 01 7f
						SectionBase: wax.SectionBase{
							ID:   wax.TypeSectionID,
							Size: 0x15,
							Content: []byte{
								0x04,
								0x60, 0x00, 0x01, 0x7f,
								0x60, 0x00, 0x00,
								0x60, 0x03, 0x7f, 0x7f, 0x7f, 0x01, 0x7f,
								0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f,
							},
						},
						FuncTypes: []*wax.FuncType{
							&wax.FuncType{
								ParamTypes:  []wax.ValType{},
								ReturnTypes: []wax.ValType{0x7f},
							},
							&wax.FuncType{
								ParamTypes:  []wax.ValType{},
								ReturnTypes: []wax.ValType{},
							},
							&wax.FuncType{
								ParamTypes:  []wax.ValType{0x7f, 0x7f, 0x7f},
								ReturnTypes: []wax.ValType{0x7f},
							},
							&wax.FuncType{
								ParamTypes:  []wax.ValType{0x7f, 0x7f},
								ReturnTypes: []wax.ValType{0x7f},
							},
						},
					},
					&wax.ImportSection{ // 02 15 01 03 65 6e 76 0d 69 6f 5f 67 65 74 5f 73 74 64 6f 75 74 00 00
						SectionBase: wax.SectionBase{
							ID:      wax.ImportSectionID,
							Size:    0x15,
							Content: []byte{0x01, 0x03, 0x65, 0x6e, 0x76, 0x0d, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x00, 0x00},
						},
						Imports: []*wax.Import{
							&wax.Import{
								Mod:  wax.Name(string([]byte{0x65, 0x6e, 0x76})),
								Nm:   wax.Name(string([]byte{0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74})),
								Desc: &[]wax.TypeIdx{0x00}[0],
							},
						},
					},
					&wax.FunctionSection{ // 03 07 06 01 01 01 02 01 03
						SectionBase: wax.SectionBase{
							ID:      wax.FunctionSectionID,
							Size:    0x07,
							Content: []byte{0x06, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03},
						},
						Types: []wax.TypeIdx{0x01, 0x01, 0x01, 0x02, 0x01, 0x03},
					},
					&wax.TableSection{ // 04 05 01 70 01 01 01
						SectionBase: wax.SectionBase{
							ID:      wax.TableSectionID,
							Size:    0x05,
							Content: []byte{0x01, 0x70, 0x01, 0x01, 0x01},
						},
						TableTypes: []*wax.TableType{
							&wax.TableType{
								ElementType: wax.ElemType(0x70),
								Limits: wax.Limits{
									Min: 0x01,
									Max: &[]uint32{0x01}[0],
								},
							},
						},
					},
					&wax.MemorySection{ // 05 03 01 00 02
						SectionBase: wax.SectionBase{
							ID:      wax.MemorySectionID,
							Size:    0x03,
							Content: []byte{0x01, 0x00, 0x02},
						},
						MemTypes: []*wax.MemType{
							&wax.MemType{
								Limits: wax.Limits{
									Min: 0x02,
								},
							},
						},
					},
					&wax.GlobalSection{ // 06 15 03 7f 01 41 90 88 04 0b 7f 00 41 90 88 04 0b 7f 00 41 84 08 0b
						SectionBase: wax.SectionBase{
							ID:   wax.GlobalSectionID,
							Size: 0x15,
							Content: []byte{
								0x03,
								0x7f, 0x01, 0x41, 0x90, 0x88, 0x04, 0x0b,
								0x7f, 0x00, 0x41, 0x90, 0x88, 0x04, 0x0b,
								0x7f, 0x00, 0x41, 0x84, 0x08, 0x0b,
							},
						},
						Globals: []*wax.Global{
							&wax.Global{
								Type: wax.GlobalType{
									R: wax.ValType(0x7f),
									M: 0x01,
								},
								Init: wax.InitExpr{0x41, 0x90, 0x88, 0x04, 0x0b},
							},
							&wax.Global{
								Type: wax.GlobalType{
									R: wax.ValType(0x7f),
									M: 0x00,
								},
								Init: wax.InitExpr{0x41, 0x90, 0x88, 0x04, 0x0b},
							},
							&wax.Global{
								Type: wax.GlobalType{
									R: wax.ValType(0x7f),
									M: 0x00,
								},
								Init: wax.InitExpr{0x41, 0x84, 0x08, 0x0b},
							},
						},
					},
					&wax.ExportSection{
						SectionBase: wax.SectionBase{
							ID:   wax.ExportSectionID,
							Size: 0x60,
							Content: []byte{
								0x08,
								0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00,
								0x0b, 0x5f, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x03, 0x01,
								0x0a, 0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x03, 0x02,
								0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x02,
								0x08, 0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x03,
								0x06, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x00, 0x04,
								0x0d, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x00, 0x05,
								0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x00, 0x06,
							},
						},
						Exports: []*wax.Export{
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79})),
								DescType: wax.ExportDescTypeMem,
								Desc:     &[]wax.MemIdx{0x00}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x5f, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65})),
								DescType: wax.ExportDescTypeGlobal,
								Desc:     &[]wax.GlobalIdx{0x01}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x5f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64})),
								DescType: wax.ExportDescTypeGlobal,
								Desc:     &[]wax.GlobalIdx{0x02}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x5f, 0x73, 0x74, 0x61, 0x72, 0x74})),
								DescType: wax.ExportDescTypeFunc,
								Desc:     &[]wax.FuncIdx{0x02}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e})),
								DescType: wax.ExportDescTypeFunc,
								Desc:     &[]wax.FuncIdx{0x03}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74})),
								DescType: wax.ExportDescTypeFunc,
								Desc:     &[]wax.FuncIdx{0x04}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70})),
								DescType: wax.ExportDescTypeFunc,
								Desc:     &[]wax.FuncIdx{0x05}[0],
							},
							&wax.Export{
								Nm:       wax.Name(string([]byte{0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x70})),
								DescType: wax.ExportDescTypeFunc,
								Desc:     &[]wax.FuncIdx{0x06}[0],
							},
						},
					},
					&wax.CodeSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CodeSectionID,
							Size: 0xa6,
							Content: []byte{
								0x06,
								0x02, 0x00, 0x0b,
								0x09, 0x00, 0x10, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1a, 0x0b,
								0x09, 0x00, 0x10, 0x80, 0x80, 0x80, 0x80, 0x00, 0x1a, 0x0b,
								0x2c,
								0x01, 0x01, 0x7f, 0x20, 0x00, 0x21, 0x03, 0x02, 0x40, 0x03, 0x40, 0x20, 0x02, 0x45, 0x0d, 0x01,
								0x20, 0x03, 0x20, 0x01, 0x3a, 0x00, 0x00, 0x20, 0x03, 0x41, 0x01, 0x6a, 0x21, 0x03, 0x20, 0x02,
								0x41, 0x7f, 0x6a, 0x21, 0x02, 0x0c, 0x00, 0x0b, 0x0b, 0x20, 0x00, 0x0b,
								0x26,
								0x01, 0x01, 0x7f, 0x41, 0x00, 0x21, 0x00, 0x03, 0x40, 0x41, 0x00, 0x20, 0x00, 0x36, 0x02, 0x80,
								0x88, 0x80, 0x80, 0x00, 0x41, 0x00, 0x28, 0x02, 0x80, 0x88, 0x80, 0x80, 0x00, 0x41, 0x01, 0x6a,
								0x21, 0x00, 0x0c, 0x00, 0x0b, 0x0b,
								0x39,
								0x00, 0x20, 0x01, 0x41, 0x00, 0x20, 0x01, 0x41, 0x00, 0x4a, 0x1b, 0x22, 0x01, 0x20, 0x00, 0x41,
								0x00, 0x20, 0x00, 0x41, 0x00, 0x4a, 0x1b, 0x22, 0x00, 0xad, 0x20, 0x00, 0x41, 0x7f, 0x6a, 0xad,
								0x7e, 0x42, 0x01, 0x88, 0xa7, 0x6c, 0x20, 0x00, 0x20, 0x01, 0xad, 0x20, 0x01, 0x41, 0x7f, 0x6a,
								0xad, 0x7e, 0x42, 0x01, 0x88, 0xa7, 0x6c, 0x6a, 0x0b,
							},
						},
						Code: []wax.Code{
							wax.Code{
								Size: 0x02,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{},
									Body: wax.Expr{
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
							wax.Code{
								Size: 0x09,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{},
									Body: wax.Expr{
										&wax.InstrCall{Opcode: wax.Opcode(0x10), FuncIdx: wax.FuncIdx(0), FuncIdxBytes: []byte{0x80, 0x80, 0x80, 0x80, 0x00}},
										&wax.InstrDrop{Opcode: wax.Opcode(0x1a)},
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
							wax.Code{
								Size: 0x09,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{},
									Body: wax.Expr{
										&wax.InstrCall{Opcode: wax.Opcode(0x10), FuncIdx: wax.FuncIdx(0), FuncIdxBytes: []byte{0x80, 0x80, 0x80, 0x80, 0x00}},
										&wax.InstrDrop{Opcode: wax.Opcode(0x1a)},
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
							wax.Code{
								Size: 0x2c,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{wax.ValType(0x7f)},
									Body: wax.Expr{
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x00, LocalIdxBytes: []byte{0x00}},
										&wax.InstrLocalSet{Opcode: wax.Opcode(0x21), LocalIdx: 0x03, LocalIdxBytes: []byte{0x03}},
										&wax.InstrBlock{Opcode: wax.Opcode(0x02), BlockType: wax.BlockType(0x40), Instructions: []wax.Instr{
											&wax.InstrLoop{Opcode: wax.Opcode(0x03), BlockType: wax.BlockType(0x40), Instructions: []wax.Instr{
												&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x02, LocalIdxBytes: []byte{0x02}},
												&wax.InstrI32Eqz{Opcode: wax.Opcode(0x45)},
												&wax.InstrBrIf{Opcode: wax.Opcode(0x0d), LabelIdx: 0x01, LabelIdxBytes: []byte{0x01}},
												&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x03, LocalIdxBytes: []byte{0x03}},
												&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x01, LocalIdxBytes: []byte{0x01}},
												&wax.InstrI32Store8{Opcode: wax.Opcode(0x3a), MemArg: wax.MemArg{Align: 0x00, Offset: 0x00}, MemArgBytes: []byte{0x00, 0x00}},
												&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x03, LocalIdxBytes: []byte{0x03}},
												&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x01, NBytes: []byte{0x01}},
												&wax.InstrI32Add{Opcode: wax.Opcode(0x6a)},
												&wax.InstrLocalSet{Opcode: wax.Opcode(0x21), LocalIdx: 0x03, LocalIdxBytes: []byte{0x03}},
												&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x02, LocalIdxBytes: []byte{0x02}},
												&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x7f, NBytes: []byte{0x7f}},
												&wax.InstrI32Add{Opcode: wax.Opcode(0x6a)},
												&wax.InstrLocalSet{Opcode: wax.Opcode(0x21), LocalIdx: 0x02, LocalIdxBytes: []byte{0x02}},
												&wax.InstrBr{Opcode: wax.Opcode(0x0c), LabelIdx: 0x00, LabelIdxBytes: []byte{0x00}},
												&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
											},
											},
											&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
										},
										},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x00, LocalIdxBytes: []byte{0x00}},
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
							wax.Code{
								Size: 0x26,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{wax.ValType(0x7f)},
									Body: wax.Expr{
										&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x00, NBytes: []byte{0x00}},
										&wax.InstrLocalSet{Opcode: wax.Opcode(0x21), LocalIdx: 0x00, LocalIdxBytes: []byte{0x00}},
										&wax.InstrLoop{Opcode: wax.Opcode(0x03), BlockType: wax.BlockType(0x40), Instructions: []wax.Instr{
											&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x00, NBytes: []byte{0x00}},
											&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: wax.LocalIdx(0x00), LocalIdxBytes: []byte{0x00}},
											&wax.InstrI32Store{Opcode: wax.Opcode(0x36), MemArg: wax.MemArg{Align: 0x02, Offset: 0x400}, MemArgBytes: []byte{0x02, 0x80, 0x88, 0x80, 0x80, 0x00}},
											&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x00, NBytes: []byte{0x00}},
											&wax.InstrI32Load{Opcode: wax.Opcode(0x28), MemArg: wax.MemArg{Align: 0x02, Offset: 0x400}, MemArgBytes: []byte{0x02, 0x80, 0x88, 0x80, 0x80, 0x00}},
											&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x01, NBytes: []byte{0x01}},
											&wax.InstrI32Add{Opcode: wax.Opcode(0x6a)},
											&wax.InstrLocalSet{Opcode: wax.Opcode(0x21), LocalIdx: wax.LocalIdx(0x00), LocalIdxBytes: []byte{0x00}},
											&wax.InstrBr{Opcode: wax.Opcode(0x0c), LabelIdx: wax.LabelIdx(0x00), LabelIdxBytes: []byte{0x00}},
											&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
										}},
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
							wax.Code{
								Size: 0x39,
								Code: wax.Func{
									Type:   0,
									Locals: []wax.ValType{},
									Body: wax.Expr{
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x01, LocalIdxBytes: []byte{0x01}},
										&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x00, NBytes: []byte{0x00}},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x01, LocalIdxBytes: []byte{0x01}},
										&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x00, NBytes: []byte{0x00}},
										&wax.InstrI32Gts{Opcode: wax.Opcode(0x4a)},
										&wax.InstrSelect{Opcode: wax.Opcode(0x1b)},
										&wax.InstrLocalTee{Opcode: wax.Opcode(0x22), LocalIdx: 0x01, LocalIdxBytes: []byte{0x01}},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x00, LocalIdxBytes: []byte{0x00}},
										&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x00, NBytes: []byte{0x00}},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x00, LocalIdxBytes: []byte{0x00}},
										&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x00, NBytes: []byte{0x00}},
										&wax.InstrI32Gts{Opcode: wax.Opcode(0x4a)},
										&wax.InstrSelect{Opcode: wax.Opcode(0x1b)},
										&wax.InstrLocalTee{Opcode: wax.Opcode(0x22), LocalIdx: 0x00, LocalIdxBytes: []byte{0x00}},
										&wax.InstrI64ExtenduI32{Opcode: wax.Opcode(0xad)},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x00, LocalIdxBytes: []byte{0x00}},
										&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x7f, NBytes: []byte{0x7f}},
										&wax.InstrI32Add{Opcode: wax.Opcode(0x6a)},
										&wax.InstrI64ExtenduI32{Opcode: wax.Opcode(0xad)},
										&wax.InstrI64Mul{Opcode: wax.Opcode(0x7e)},
										&wax.InstrI64Const{Opcode: wax.Opcode(0x42), N: 0x01, NBytes: []byte{0x01}},
										&wax.InstrI64Shru{Opcode: wax.Opcode(0x88)},
										&wax.InstrI32WrapI64{Opcode: wax.Opcode(0xa7)},
										&wax.InstrI32Mul{Opcode: wax.Opcode(0x6c)},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x00, LocalIdxBytes: []byte{0x00}},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x01, LocalIdxBytes: []byte{0x01}},
										&wax.InstrI64ExtenduI32{Opcode: wax.Opcode(0xad)},
										&wax.InstrLocalGet{Opcode: wax.Opcode(0x20), LocalIdx: 0x01, LocalIdxBytes: []byte{0x01}},
										&wax.InstrI32Const{Opcode: wax.Opcode(0x41), N: 0x7f, NBytes: []byte{0x7f}},
										&wax.InstrI32Add{Opcode: wax.Opcode(0x6a)},
										&wax.InstrI64ExtenduI32{Opcode: wax.Opcode(0xad)},
										&wax.InstrI64Mul{Opcode: wax.Opcode(0x7e)},
										&wax.InstrI64Const{Opcode: wax.Opcode(0x42), N: 0x01, NBytes: []byte{0x01}},
										&wax.InstrI64Shru{Opcode: wax.Opcode(0x88)},
										&wax.InstrI32WrapI64{Opcode: wax.Opcode(0xa7)},
										&wax.InstrI32Mul{Opcode: wax.Opcode(0x6c)},
										&wax.InstrI32Add{Opcode: wax.Opcode(0x6a)},
										&wax.InstrEnd{Opcode: wax.Opcode(0x0b)},
									},
								},
							},
						},
					},

					&wax.DataSection{
						SectionBase: wax.SectionBase{
							ID:   wax.DataSectionID,
							Size: 0x0b,
							Content: []byte{
								0x01, 0x00, 0x41, 0x80, 0x08, 0x0b, 0x04, 0x00, 0x00, 0x00, 0x00,
							},
						},
					},

					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x010b,
							Content: []byte{
								0x07, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00,
								0x17, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
								0x00, 0x00, 0x02, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x0b, 0x01, 0x03, 0x05,
								0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x01,
								0x1a, 0x04, 0x22, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x1b,
								0x00, 0x03, 0x0f, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x43, 0x00,
								0x00, 0x00, 0x01, 0x1f, 0x04, 0x22, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
								0x00, 0x01, 0x20, 0x00, 0x05, 0x19, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00,
								0x00, 0x5b, 0x00, 0x00, 0x00, 0x01, 0x3d, 0xee, 0x00, 0x00, 0x00, 0x06, 0xbd, 0x00, 0x00, 0x00,
								0x01, 0x3d, 0xee, 0x00, 0x00, 0x00, 0x06, 0xc1, 0x00, 0x00, 0x00, 0x01, 0x3d, 0xfc, 0x00, 0x00,
								0x00, 0x06, 0xc8, 0x00, 0x00, 0x00, 0x01, 0x3d, 0x03, 0x01, 0x00, 0x00, 0x00, 0x07, 0x46, 0x00,
								0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x0c,
								0x05, 0x6d, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0xa6, 0x00, 0x00,
								0x00, 0x03, 0x14, 0xf5, 0x00, 0x00, 0x00, 0x06, 0xd5, 0x00, 0x00, 0x00, 0x03, 0x14, 0xf5, 0x00,
								0x00, 0x00, 0x06, 0xda, 0x00, 0x00, 0x00, 0x03, 0x14, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x08, 0x6a,
								0x00, 0x00, 0x00, 0x01, 0x04, 0x08, 0xb9, 0x00, 0x00, 0x00, 0x05, 0x04, 0x08, 0xc3, 0x00, 0x00,
								0x00, 0x07, 0x01, 0x08, 0xcd, 0x00, 0x00, 0x00, 0x07, 0x04, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f})),
					},

					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x01,
							Content: []byte{
								0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x63, 0x69, 0x6e, 0x66, 0x6f})),
					},

					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x42,
							Content: []byte{
								0x3e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0xee, 0x00,
								0x00, 0x00, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
								0x00, 0xfc, 0x00, 0x00, 0x00, 0x62, 0x79, 0x74, 0x65, 0x00, 0x03, 0x01, 0x00, 0x00, 0x75, 0x69,
								0x6e, 0x74, 0x70, 0x74, 0x72, 0x00, 0xf5, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x74, 0x00, 0x00, 0x00,
								0x00, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73})),
					},

					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x30,
							Content: []byte{
								0x05, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
								0x19, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00,
								0x6d, 0x00, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73})),
					},

					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x80,
							Content: []byte{
								0x01, 0x11, 0x01, 0x25, 0x0e, 0x13, 0x05, 0x03, 0x0e, 0x10, 0x17, 0xb4, 0x42, 0x19, 0x11, 0x01,
								0x55, 0x17, 0x00, 0x00, 0x02, 0x2e, 0x00, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x20,
								0x0b, 0x00, 0x00, 0x03, 0x2e, 0x01, 0x11, 0x01, 0x12, 0x06, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b,
								0x3b, 0x0b, 0x00, 0x00, 0x04, 0x1d, 0x00, 0x31, 0x13, 0x11, 0x01, 0x12, 0x06, 0x58, 0x0b, 0x59,
								0x0b, 0x00, 0x00, 0x05, 0x2e, 0x01, 0x11, 0x01, 0x12, 0x06, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b,
								0x3b, 0x0b, 0x49, 0x13, 0x00, 0x00, 0x06, 0x05, 0x00, 0x03, 0x0e, 0x3a, 0x0b, 0x3b, 0x0b, 0x49,
								0x13, 0x00, 0x00, 0x07, 0x2e, 0x00, 0x11, 0x01, 0x12, 0x06, 0x6e, 0x0e, 0x03, 0x0e, 0x3a, 0x0b,
								0x3b, 0x0b, 0x00, 0x00, 0x08, 0x24, 0x00, 0x03, 0x0e, 0x3e, 0x0b, 0x0b, 0x0b, 0x00, 0x00, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76})),
					},

					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x137,
							Content: []byte{
								0x33, 0x01, 0x00, 0x00, 0x04, 0x00, 0x74, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0xfb, 0x0e, 0x0d,
								0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x73, 0x72, 0x63, 0x2f,
								0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x67,
								0x6f, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x67, 0x6f, 0x2f, 0x73, 0x72, 0x63,
								0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x00, 0x2e, 0x2e, 0x2f, 0x73, 0x72, 0x63, 0x00,
								0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x67, 0x6f,
								0x00, 0x01, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x67, 0x6f, 0x00, 0x01,
								0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x05,
								0x02, 0x05, 0x00, 0x00, 0x00, 0x11, 0x04, 0x02, 0x05, 0x06, 0x0a, 0x03, 0x0b, 0x20, 0x04, 0x01,
								0x05, 0x00, 0x06, 0x03, 0x75, 0x74, 0x02, 0x01, 0x00, 0x01, 0x01, 0x00, 0x05, 0x02, 0x0f, 0x00,
								0x00, 0x00, 0x11, 0x04, 0x02, 0x05, 0x06, 0x0a, 0x03, 0x0b, 0x20, 0x04, 0x01, 0x05, 0x00, 0x06,
								0x03, 0x75, 0x74, 0x02, 0x01, 0x00, 0x01, 0x01, 0x00, 0x05, 0x02, 0x19, 0x00, 0x00, 0x00, 0x11,
								0x05, 0x06, 0x0a, 0x03, 0x3e, 0x3c, 0x05, 0x00, 0x06, 0x03, 0x42, 0x4a, 0x05, 0x03, 0x06, 0x03,
								0x3f, 0x90, 0x05, 0x00, 0x06, 0x03, 0x41, 0x74, 0x05, 0x02, 0x06, 0x03, 0xc1, 0x00, 0x08, 0x20,
								0x02, 0x03, 0x00, 0x01, 0x01, 0x04, 0x03, 0x00, 0x05, 0x02, 0x46, 0x00, 0x00, 0x00, 0x11, 0x0a,
								0xac, 0x06, 0x2e, 0x05, 0x03, 0x06, 0x03, 0x0f, 0x90, 0x05, 0x00, 0x06, 0x03, 0x71, 0xba, 0x02,
								0x04, 0x00, 0x01, 0x01, 0x04, 0x03, 0x00, 0x05, 0x02, 0x6d, 0x00, 0x00, 0x00, 0x11, 0x0a, 0x20,
								0x06, 0x4a, 0x4a, 0x20, 0x3c, 0x4a, 0x4a, 0x20, 0x20, 0x2e, 0x20, 0x4a, 0x20, 0x20, 0x3c, 0x20,
								0x20, 0x20, 0x2e, 0x2e, 0x20, 0x4a, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x20, 0x05, 0x02, 0x06, 0x03,
								0x1b, 0x20, 0x02, 0x01, 0x00, 0x01, 0x01,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65})),
					},

					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0xdf,
							Content: []byte{
								0x54, 0x69, 0x6e, 0x79, 0x47, 0x6f, 0x00, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x69, 0x6e,
								0x2e, 0x67, 0x6f, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x69, 0x6e, 0x69, 0x74,
								0x41, 0x6c, 0x6c, 0x00, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69,
								0x6d, 0x65, 0x2e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x63, 0x77, 0x61, 0x5f, 0x6d, 0x61,
								0x69, 0x6e, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x77, 0x61, 0x5f, 0x6d,
								0x61, 0x69, 0x6e, 0x00, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69,
								0x6d, 0x65, 0x2e, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x00, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65,
								0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x00, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74,
								0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x00, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x69, 0x6e,
								0x2e, 0x67, 0x6f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x31, 0x00, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
								0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x00, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
								0x67, 0x6f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x32, 0x00, 0x69, 0x6e, 0x74, 0x00, 0x70, 0x74, 0x72,
								0x00, 0x63, 0x00, 0x62, 0x79, 0x74, 0x65, 0x00, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x75, 0x69, 0x6e,
								0x74, 0x70, 0x74, 0x72, 0x00, 0x6d, 0x61, 0x78, 0x31, 0x00, 0x6d, 0x61, 0x78, 0x32, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72})),
					},

					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x8f,
							Content: []byte{
								0x8b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0x2e, 0x00,
								0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
								0x00, 0x51, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x63, 0x77, 0x61,
								0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0xad, 0x00, 0x00, 0x00, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d,
								0x61, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x31, 0x00, 0xc0, 0x00, 0x00,
								0x00, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x2e, 0x6c, 0x6f,
								0x6f, 0x70, 0x32, 0x00, 0x74, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
								0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x00, 0x22, 0x00, 0x00, 0x00, 0x72, 0x75, 0x6e, 0x74, 0x69,
								0x6d, 0x65, 0x2e, 0x69, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
							},
						},
						Name: wax.Name(string([]byte{0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x73})),
					},

					&wax.CustomSection{
						SectionBase: wax.SectionBase{
							ID:   wax.CustomSectionID,
							Size: 0x5b,
							Content: []byte{
								0x01, 0x59, 0x07, 0x00, 0x0d, 0x69, 0x6f, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x6f,
								0x75, 0x74, 0x01, 0x11, 0x5f, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
								0x63, 0x74, 0x6f, 0x72, 0x73, 0x02, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x03, 0x08, 0x63,
								0x77, 0x61, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x04, 0x06, 0x6d, 0x65, 0x6d, 0x73, 0x65, 0x74, 0x05,
								0x0d, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x06, 0x0b,
								0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
							},
						},
						Name: wax.Name(string([]byte{0x6e, 0x61, 0x6d, 0x65})),
					},
				},
			},
		},
	}

	for _, data := range testData {
		data := data // capture
		t.Run(data.Name, func(t *testing.T) {
			t.Parallel()

			v, err := wax.ParseBinaryModule(bytes.NewReader(data.Wasm))
			if err != nil {
				t.Fatalf("unexpected error: %+v", err)
			}
			if v.ToJSON() != data.Expected.ToJSON() {
				t.Fatalf("\n%s\n", pretty.Compare(data.Expected, v))
			}
		})
	}
}
